############################################ Login #######################################################################
1.	Create a login form with HTML and CSS.
2.	Create a login route in your Flask application that handles the form submission.
3.	Within the login route, retrieve the user's login credentials from the form and authenticate them against your user database.
4.	If the credentials are valid, create a session for the user and redirect them to the main application page.
5.	If the credentials are invalid, display an error message to the user and redirect them back to the login form.
6.	Protect any routes in your application that require authentication by checking if the user has an active session. If the userdoes not have an active session, redirect them to the login page.
############################################ Protected Login #######################################################################
To protect routes in your application, you can use the session object to check if the user has an active session. Here's an example of how you might define a protected route:
In Protected_login.py file if the user tries to access the /protected route without an active session, they will be redirected to the login page. Otherwise, the protected page will be rendered.
############################################ SignUp #######################################################################
1.	Install Flask and any necessary dependencies.
2.	Create a Flask application.
3.	Create a signup form using HTML and CSS.
4.	Create a signup route in the Flask application that handles the form submission.
5.	Within the signup route, retrieve the data submitted by the user from the form and validate it.
6.	If the data is valid, create a new user account in your database and store the user's information.
7.	If the data is invalid, display an error message to the user and redirect them back to the signup form.

